import json
import pandas as pd
from rouge_score import rouge_scorer
from agent import generate_answer_with_deepseek
import openpyxl

# üîß –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É: –ø—Ä–æ–±—ñ–ª–∏, —Ä–µ–≥—ñ—Å—Ç—Ä
def normalize_text(text):
    return ' '.join(text.lower().split())

# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
with open('test_data.json', 'r', encoding='utf-8') as f:
    test_data = json.load(f)

# üìè –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫ –∑ —Å—Ç–µ–º—ñ–Ω–≥–æ–º
scorer = rouge_scorer.RougeScorer(['rouge1', 'rougeL'], use_stemmer=True)

# üìä –ó–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
results = []

for item in test_data:
    query = item["query"]
    reference = normalize_text(item["reference_answer"])
    
    # üß† –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    generated_raw = generate_answer_with_deepseek(query)
    generated = normalize_text(generated_raw)
    
    # üîé –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    if len(generated.strip()) < 10:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{generated_raw}'")
        continue
    
    # üìà ROUGE-–æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è
    scores = scorer.score(reference, generated)

    # üìã –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    results.append({
        'Query': query,
        'Reference': reference,
        'Generated': generated,
        'ROUGE-1 F1': scores['rouge1'].fmeasure,
        'ROUGE-1 Precision': scores['rouge1'].precision,
        'ROUGE-1 Recall': scores['rouge1'].recall,
        'ROUGE-L F1': scores['rougeL'].fmeasure,
        'ROUGE-L Precision': scores['rougeL'].precision,
        'ROUGE-L Recall': scores['rougeL'].recall
    })

    # üñ®Ô∏è –í–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å
    print(f"Query: {query}")
    print(f"Reference: {reference}")
    print(f"Generated: {generated}")
    print(f"ROUGE-1 F1: {scores['rouge1'].fmeasure:.4f} | Precision: {scores['rouge1'].precision:.4f} | Recall: {scores['rouge1'].recall:.4f}")
    print(f"ROUGE-L F1: {scores['rougeL'].fmeasure:.4f} | Precision: {scores['rougeL'].precision:.4f} | Recall: {scores['rougeL'].recall:.4f}")
    print("-" * 60)

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Excel
df = pd.DataFrame(results)
df.to_excel('rouge_results.xlsx', index=False)

# üìä –ê–≥—Ä–µ–≥–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
avg_metrics = df[['ROUGE-1 F1', 'ROUGE-L F1', 'ROUGE-1 Precision', 'ROUGE-L Precision', 'ROUGE-1 Recall', 'ROUGE-L Recall']].mean()

print("\nüìä –°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö:")
for metric, value in avg_metrics.items():
    print(f"{metric}: {value:.4f}")

print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª 'rouge_results.xlsx'")